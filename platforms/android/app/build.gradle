apply plugin: 'com.android.application'

// Add this early in CordovaLib/build.gradle

if (!cordovaConfig) {
    ext.cordovaConfig = [:]
}

cordovaConfig.GRADLE_PLUGIN_GOOGLE_SERVICES_VERSION = cordovaConfig.GRADLE_PLUGIN_GOOGLE_SERVICES_VERSION ?: "4.3.15"
cordovaConfig.KOTLIN_VERSION = cordovaConfig.KOTLIN_VERSION ?: "1.9.0"
cordovaConfig.KOTLIN_JVM_TARGET = cordovaConfig.KOTLIN_JVM_TARGET ?: "17"
cordovaConfig.AGP_VERSION = cordovaConfig.AGP_VERSION ?: "8.1.0"
cordovaConfig.BUILD_TOOLS_VERSION = cordovaConfig.BUILD_TOOLS_VERSION ?: "33.0.2"
cordovaConfig.COMPILE_SDK_VERSION = cordovaConfig.COMPILE_SDK_VERSION ?: 33
cordovaConfig.SDK_VERSION = cordovaConfig.SDK_VERSION ?: 33
cordovaConfig.MIN_SDK_VERSION = cordovaConfig.MIN_SDK_VERSION ?: 22
cordovaConfig.ANDROIDX_APP_COMPAT_VERSION = cordovaConfig.ANDROIDX_APP_COMPAT_VERSION ?: "1.6.1"
cordovaConfig.ANDROIDX_CORE_SPLASHSCREEN_VERSION = cordovaConfig.ANDROIDX_CORE_SPLASHSCREEN_VERSION ?: "1.0.1"
cordovaConfig.IS_GRADLE_PLUGIN_KOTLIN_ENABLED = cordovaConfig.IS_GRADLE_PLUGIN_KOTLIN_ENABLED ?: false
cordovaConfig.IS_GRADLE_PLUGIN_GOOGLE_SERVICES_ENABLED = cordovaConfig.IS_GRADLE_PLUGIN_GOOGLE_SERVICES_ENABLED ?: false


if (cordovaConfig.IS_GRADLE_PLUGIN_KOTLIN_ENABLED) {
    apply plugin: 'kotlin-android'

    if (!cdvHelpers.isVersionGreaterThanEqual(cordovaConfig.KOTLIN_VERSION, '1.8.0')) {
        println "Kotlin version < 1.8.0 detected. Applying kotlin-android-extensions plugin."
        apply plugin: 'kotlin-android-extensions'
    }
}

buildscript {
    apply from: '../CordovaLib/cordova.gradle'

    // Set default fallback before use
    cordovaConfig.GRADLE_PLUGIN_GOOGLE_SERVICES_VERSION = cordovaConfig.GRADLE_PLUGIN_GOOGLE_SERVICES_VERSION ?: "4.3.15"

    if (cordovaConfig.IS_GRADLE_PLUGIN_KOTLIN_ENABLED) {
        if (!cdvHelpers.isVersionValid(cordovaConfig.KOTLIN_VERSION)) {
            throw new GradleException("The defined Kotlin version (${cordovaConfig.KOTLIN_VERSION}) does not appear to be a valid version.")
        }
    }

    apply from: 'repositories.gradle'
    repositories repos

    dependencies {
        classpath "com.android.tools.build:gradle:${cordovaConfig.AGP_VERSION}"

        if (cordovaConfig.IS_GRADLE_PLUGIN_KOTLIN_ENABLED) {
            classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${cordovaConfig.KOTLIN_VERSION}"
        }

        if (cordovaConfig.IS_GRADLE_PLUGIN_GOOGLE_SERVICES_ENABLED == true) {
            if (!cdvHelpers.isVersionValid(cordovaConfig.GRADLE_PLUGIN_GOOGLE_SERVICES_VERSION)) {
                throw new GradleException("The defined Google Services plugin version (${cordovaConfig.GRADLE_PLUGIN_GOOGLE_SERVICES_VERSION}) does not appear to be a valid version.")
            }

            String gsClasspath = "com.google.gms:google-services:${cordovaConfig.GRADLE_PLUGIN_GOOGLE_SERVICES_VERSION}"
            println "Adding classpath: ${gsClasspath}"
            classpath gsClasspath
        }
    }
}

allprojects {
    def hasRepositoriesGradle = file('repositories.gradle').exists()
    if (hasRepositoriesGradle) {
        apply from: 'repositories.gradle'
    } else {
        apply from: "${project.rootDir}/repositories.gradle"
    }

    repositories repos
}

task wrapper(type: Wrapper) {
    gradleVersion = cordovaConfig.GRADLE_VERSION
}

ext {
    apply from: '../CordovaLib/cordova.gradle'

    if (!project.hasProperty('cdvVersionCode')) cdvVersionCode = null
    if (!project.hasProperty('cdvBuildMultipleApks')) cdvBuildMultipleApks = null
    if (!project.hasProperty('cdvVersionCodeForceAbiDigit')) cdvVersionCodeForceAbiDigit = null
    if (!project.hasProperty('cdvReleaseSigningPropertiesFile')) cdvReleaseSigningPropertiesFile = null
    if (!project.hasProperty('cdvDebugSigningPropertiesFile')) cdvDebugSigningPropertiesFile = null
    if (!project.hasProperty('cdvBuildArch')) cdvBuildArch = null

    cdvPluginPostBuildExtras = []
}

apply from: "../cordova-plugin-local-notification/myapp-localnotification.gradle"

def hasBuildExtras1 = file('build-extras.gradle').exists()
if (hasBuildExtras1) apply from: 'build-extras.gradle'

def hasBuildExtras2 = file('../build-extras.gradle').exists()
if (hasBuildExtras2) apply from: '../build-extras.gradle'

privateHelpers.applyCordovaConfigCustomization()

if (ext.cdvDebugSigningPropertiesFile == null && file('../debug-signing.properties').exists()) {
    ext.cdvDebugSigningPropertiesFile = '../debug-signing.properties'
}
if (ext.cdvReleaseSigningPropertiesFile == null && file('../release-signing.properties').exists()) {
    ext.cdvReleaseSigningPropertiesFile = '../release-signing.properties'
}

ext.cdvBuildMultipleApks = cdvBuildMultipleApks == null ? false : cdvBuildMultipleApks.toBoolean()
ext.cdvVersionCodeForceAbiDigit = cdvVersionCodeForceAbiDigit == null ? false : cdvVersionCodeForceAbiDigit.toBoolean()
ext.cdvVersionCode = cdvVersionCode == null ? null : Integer.parseInt('' + cdvVersionCode)

def computeBuildTargetName(debugBuild) {
    def ret = 'assemble'
    if (cdvBuildMultipleApks && cdvBuildArch) {
        def arch = cdvBuildArch == 'arm' ? 'armv7' : cdvBuildArch
        ret += '' + arch.toUpperCase().charAt(0) + arch.substring(1)
    }
    return ret + (debugBuild ? 'Debug' : 'Release')
}

task cdvBuildDebug {
    dependsOn { computeBuildTargetName(true) }
}
task cdvBuildRelease {
    dependsOn { computeBuildTargetName(false) }
}

task cdvPrintProps {
    doLast {
        println('cdvBuildToolsVersion=' + cdvBuildToolsVersion)
        println('cdvVersionCode=' + cdvVersionCode)
        println('cdvVersionCodeForceAbiDigit=' + cdvVersionCodeForceAbiDigit)
        println('cdvSdkVersion=' + cdvSdkVersion)
        println('cdvMinSdkVersion=' + cdvMinSdkVersion)
        println('cdvMaxSdkVersion=' + cdvMaxSdkVersion)
        println('cdvBuildMultipleApks=' + cdvBuildMultipleApks)
        println('cdvReleaseSigningPropertiesFile=' + cdvReleaseSigningPropertiesFile)
        println('cdvDebugSigningPropertiesFile=' + cdvDebugSigningPropertiesFile)
        println('cdvBuildArch=' + cdvBuildArch)
        println('computedVersionCode=' + android.defaultConfig.versionCode)
        println('cdvAndroidXAppCompatVersion=' + cdvAndroidXAppCompatVersion)
        println('cdvAndroidXWebKitVersion=' + cdvAndroidXWebKitVersion)
        android.productFlavors.each { flavor ->
            println('computed' + flavor.name.capitalize() + 'VersionCode=' + flavor.versionCode)
        }
    }
}

android {
    namespace cordovaConfig.PACKAGE_NAMESPACE

    buildFeatures {
        buildConfig true
    }

    defaultConfig {
        versionCode cdvVersionCode ?: new BigInteger("" + privateHelpers.extractIntFromManifest("versionCode"))
        applicationId cordovaConfig.PACKAGE_NAMESPACE

        minSdkVersion cordovaConfig.MIN_SDK_VERSION
        if (cordovaConfig.MAX_SDK_VERSION != null) {
            maxSdkVersion cordovaConfig.MAX_SDK_VERSION
        }
        targetSdkVersion cordovaConfig.SDK_VERSION
        compileSdkVersion cordovaConfig.COMPILE_SDK_VERSION
    }

    lintOptions {
        abortOnError false
    }

    buildToolsVersion cordovaConfig.BUILD_TOOLS_VERSION

    if (Boolean.valueOf(cdvBuildMultipleApks)) {
        flavorDimensions "default"
        productFlavors {
            armeabi {
                versionCode defaultConfig.versionCode * 10 + 1
                ndk.abiFilters = ["armeabi"]
            }
            armv7 {
                versionCode defaultConfig.versionCode * 10 + 2
                ndk.abiFilters = ["armeabi-v7a"]
            }
            arm64 {
                versionCode defaultConfig.versionCode * 10 + 3
                ndk.abiFilters = ["arm64-v8a"]
            }
            x86 {
                versionCode defaultConfig.versionCode * 10 + 4
                ndk.abiFilters = ["x86"]
            }
            x86_64 {
                versionCode defaultConfig.versionCode * 10 + 5
                ndk.abiFilters = ["x86_64"]
            }
        }
    } else if (Boolean.valueOf(cdvVersionCodeForceAbiDigit)) {
        defaultConfig {
            versionCode defaultConfig.versionCode * 10
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    if (cordovaConfig.IS_GRADLE_PLUGIN_KOTLIN_ENABLED) {
        cordovaConfig.KOTLIN_JVM_TARGET = cordovaConfig.KOTLIN_JVM_TARGET ?: "17"
        kotlinOptions {
            jvmTarget = JavaLanguageVersion.of(cordovaConfig.KOTLIN_JVM_TARGET)
        }
    }

    if (cdvReleaseSigningPropertiesFile) {
        signingConfigs {
            release {
                keyAlias = ""
                keyPassword = ""
                storeFile = null
                storePassword = ""
            }
        }
        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }
        addSigningProps(cdvReleaseSigningPropertiesFile, signingConfigs.release)
    }

    if (cdvDebugSigningPropertiesFile) {
        addSigningProps(cdvDebugSigningPropertiesFile, signingConfigs.debug)
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')
    implementation "androidx.appcompat:appcompat:${cordovaConfig.ANDROIDX_APP_COMPAT_VERSION}"
    implementation "androidx.core:core-splashscreen:${cordovaConfig.ANDROIDX_CORE_SPLASHSCREEN_VERSION}"

    if (cordovaConfig.IS_GRADLE_PLUGIN_KOTLIN_ENABLED) {
        implementation "org.jetbrains.kotlin:kotlin-stdlib:${cordovaConfig.KOTLIN_VERSION}"
    }

    constraints {
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:${cordovaConfig.KOTLIN_VERSION}") {
            because("kotlin-stdlib-jdk7 is now a part of kotlin-stdlib")
        }
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${cordovaConfig.KOTLIN_VERSION}") {
            because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
        }
    }

    implementation(project(path: ":CordovaLib"))
    implementation "androidx.core:core:1.12.0"
}

def addSigningProps(propsFilePath, signingConfig) {
    def propsFile = file(propsFilePath)
    def props = new Properties()
    propsFile.withReader { reader -> props.load(reader) }

    def storeFile = new File(props.get('key.store') ?: privateHelpers.ensureValueExists(propsFilePath, props, 'storeFile'))
    if (!storeFile.isAbsolute()) {
        storeFile = RelativePath.parse(true, storeFile.toString()).getFile(propsFile.getParentFile())
    }
    if (!storeFile.exists()) {
        throw new FileNotFoundException('Keystore file does not exist: ' + storeFile.getAbsolutePath())
    }

    signingConfig.keyAlias = props.get('key.alias') ?: privateHelpers.ensureValueExists(propsFilePath, props, 'keyAlias')
    signingConfig.keyPassword = props.get('keyPassword', props.get('key.alias.password', signingConfig.keyPassword))
    signingConfig.storeFile = storeFile
    signingConfig.storePassword = props.get('storePassword', props.get('key.store.password', signingConfig.storePassword))

    def storeType = props.get('storeType', props.get('key.store.type', ''))
    if (!storeType) {
        def filename = storeFile.getName().toLowerCase()
        storeType = filename.endsWith('.p12') || filename.endsWith('.pfx') ? 'pkcs12' : signingConfig.storeType
    }
    signingConfig.storeType = storeType
}

for (def func : cdvPluginPostBuildExtras) {
    func()
}

if (hasProperty('postBuildExtras')) {
    postBuildExtras()
}

if (cordovaConfig.IS_GRADLE_PLUGIN_GOOGLE_SERVICES_ENABLED == true) {
    apply plugin: 'com.google.gms.google-services'
}
